/**
* @name         : UtilityHelper
* @description  : This class will be use to create a common method.
* @testClass    : UtilityHelperTest
* <Date>        <Modified By>     	<Brief Description of Change>
* 2024-02-12    Vince Vuong         Created
* 2024-03-27    Vince Vuong         Added logic to generate custom voucher codes
*/
public without sharing class UtilityHelper {

    //Get all active voucher definitions
    public static Map<String, VoucherDefinition> voucherDefinitions {
        get {
            if (voucherDefinitions == null) {
                voucherDefinitions = new Map<String, VoucherDefinition>();
                for(VoucherDefinition rec : [SELECT Id, Name, AutogeneratedCodeLength, CodePrefix, CodeSuffix
                                            FROM VoucherDefinition 
                                            WHERE IsActive = TRUE]) {
                    voucherDefinitions.put(rec.Name, rec);
                }
            }
            return voucherDefinitions;
        }
        private set;
    }


    //public static Organisation_Settings__c getOrgSettings(){
    //    return Organisation_Settings__c.getOrgDefaults();
    //}

    //Implement the Luhn algorithm to calculate the Luhn check digit.
    //Online Luhn Calculate check digit: https://simplycalc.com/luhn-calculate.php
    public static Integer calculateLuhnCheckDigit(String code) {
        try {
            if (String.isNotBlank(code)) {
                Integer len = code.length();
                Integer sum = 0;
                Integer counter = 1;

                //Start from the rightmost digit, and moving left
                for (Integer i = len-1; i >= 0; i--) {
                    Integer d = Integer.ValueOf(code.substring(i,i+1));
                    //Double the value of every second digit (including the rightmost digit).
                    if (Math.mod(counter, 2) == 1) {
                        d *= 2;
                    }
                    //Subtract 9 if multipliers > 9
                    if (d > 9) {
                        d -= 9;
                    }
                    sum += d;
                    counter++;
                }
                //Return check digit
                Integer remainder = Math.mod(sum, 10);
                Integer checkdigit = (remainder > 0) ? 10 - remainder : 0;
                return checkdigit;
            }
        }catch (Exception ex) {
            //Logger.error(GlobalConstants.EXCEPTION_MESSAGE_PREFIX + ex.getStackTraceString());
        } finally {
            //Logger.saveLog();
        }
        return -1;
    }

    //Generate membership numbers based on Luhn check digit
    public static Map<String, String> generateMembershipNumbers(Set<String> memberNumbers) {
        Map<String, String> generatedNumbersMappings = new Map<String, String>();
        // fetch custom setting defult prefix
        Organisation_Settings__c  customSettingPrefix = Organisation_Settings__c.getOrgDefaults();

        for(String strInternalNumber : memberNumbers){
            Integer checksum = calculateLuhnCheckDigit(strInternalNumber);
            //New Membership format = Prefix + Membership Auto Sequence + 1-digit Checksum
            String customerNumber = (checksum >= 0) ? customSettingPrefix.Membership_Prefix__c + strInternalNumber + checksum : customSettingPrefix.Membership_Prefix__c + strInternalNumber;
            generatedNumbersMappings.put(strInternalNumber, customerNumber);
        }
        return generatedNumbersMappings;
    }

    //Return an empty string if field is either null or empty
    public static String nullString(String pString) {
        return nullString(pString, '');
    }

    //Return an default value if field is either null or empty
    public static String nullString(String pString, String pDefaultValue) {
        return (pString != null) ? pString.trim() : pDefaultValue;
    }

    //Generate custom voucher codes as per voucher definition
    public static List<String> generateVoucherCodes(String voucherDefinitionName, Integer count) {
        List<String> voucherCodes = new List<String>();
        Map<String, VoucherDefinition> definitions = UtilityHelper.voucherDefinitions;

        if (definitions.get(voucherDefinitionName) != null) {
            VoucherDefinition voucherDef = definitions.get(voucherDefinitionName);

            //Get Code Prefix, Code Suffix and code length
            String codePrefix = UtilityHelper.nullString(voucherDef.CodePrefix);
            String codeSuffix = UtilityHelper.nullString(voucherDef.CodeSuffix);
            Integer codeLength = (voucherDef.AutogeneratedCodeLength != null) ? voucherDef.AutogeneratedCodeLength : 8;

            for(Integer i=0; i< count; i++) {
                //UUID = 549e5d2b-4e00-4907-9969-6fda6ab14e59
                //Strip hyphen to get 32-chars length
                String uuidString = UUID.randomUUID().toString().replace('-','');
                String code = codePrefix + uuidString.substring(0, codeLength).toUpperCase() + codeSuffix;
                voucherCodes.add(code);
            }
        }
        return voucherCodes;
    }

    //Count number of Voucher Codes
    public static Integer countVoucherCodes(String voucherCodes) {
        Integer count = 0;
        try {
            if (String.isNotBlank(voucherCodes)) {
                String[] codes = voucherCodes.split(',');
                count = codes.size();
            }
        }
        catch(Exception ex) {
        }
        return count;
    }


    public static List<LoyaltyProgram> getLoyaltyProgram()
    {

    List<LoyaltyProgram> proIdMain = new List<LoyaltyProgram>([select id from LoyaltyProgram where name ='Just Shop']);
    return proIdMain;
    }

    public static Map<Id, Voucher> getVoucherDefinitionId()
    {

    Map<Id, Voucher> vId = new Map<Id, Voucher>([select VoucherDefinitionId from voucher where VoucherDefinition.name = 'Birthday Voucher' LIMIT 1]);
    return vId;
    }

    public static List<JournalType> getJournalType()
    {

        List<JournalType> JrnlTypeId = new List<JournalType>([SELECT Id FROM JournalType where name ='Points Expiration']);
    return JrnlTypeId;
    }

}